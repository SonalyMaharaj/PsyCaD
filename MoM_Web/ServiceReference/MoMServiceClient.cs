using MoM_Web.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
namespace MoM_Web.ServiceReference
{
    /*Author: Solomon Moyo
        NOTE: This is not a real service reference/serviceclient generated by wcf service
        but this is a home made serviceReference.serviceclient class that will assist those
        who are not comfortabel withe rest api and how to works, so that they can also communicate
        with it via this class.
        [So this structre is more of A Adapter design pattern or Facade Design Pattern]*/
    public class MoMServiceClient
    {

        public User loginUser(string username, string password) 
        {
            try {
                string json = getJson("Login/loginUser?username=" + username + "&password=" + password); //Login User, and get the user logged in
                if (json == "false")
                {

                    return null;
                }
                User user = JsonConvert.DeserializeObject<User>(json); //deserialize to User class
                return user;

            }
            catch (Exception e)
            {
                //Error Message
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
                
                return null;
            }

        }


        public bool EditPsychologist(int id, string name, string surname, string email)
        {

            try{ 

                PsychologistClass psychologistClass = new PsychologistClass
                {
                    PsychologistId = id,
                    PsychologistName = name,
                    IsActive = '1',
                    PsychologistSurname = surname,
                    PsychologistEmail = email,

                };

                string jsonout = JsonConvert.SerializeObject(psychologistClass);
                string jsonresult = uploadjson("Psychologist/EditPsychologist?psychologist=", jsonout);
                if (jsonresult == "true")
                {
                    return true;
                }

            }
            catch (Exception e)
            {
                //Error Message
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public bool ActivatePsychologist(int psychologistId)
        {
            try
            {
                string jsonresults = getJson("Psychologist/ActivatePsychologist?psychologistId=" + psychologistId);
                if (jsonresults == "true")
                {
                    return true;
                }

            }
            catch (Exception e) 
            {
                
                System.Console.WriteLine("Issue with calling to the server "+ e.GetBaseException());
               
            }
            return false;
        }

        public bool DeactivatePsychologist(int psychologistId) {
            try
            {
                string jsonresults = getJson("Psychologist/DeactivatePsychologist?psychologistId=" + psychologistId);
                if (jsonresults=="true") {
                    return true;
                }
           
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }

            return false;
        }

        public PsychologistClass GetPsychologist(int psychologistId)
        {
            string json = getJson("Psychologist/GetPsychologist?psychologistId=" + psychologistId);
            if (json == "false")
            {

                return null;
            }
            PsychologistClass psychologist = JsonConvert.DeserializeObject<PsychologistClass>(json);
            return psychologist;
        }

        public List<PsychologistClass> GetPsychologists()
        {
            string json = getJson("Psychologist/GetPsychologists");
            if (json == "false")
            {

                return null;
            }
            List<PsychologistClass> psychologistClasses = JsonConvert.DeserializeObject<List<PsychologistClass>>(json);
            return psychologistClasses;

        }


        public List<StudentClass> GetPsychologistStudents(int psychologistId)
        {
            try {
                    string json = getJson("Psychologist/GetPsychologistStudents?psychologistId=" + psychologistId);
                    if (json == "false")
                    {
                        return null;
                    }
                    List<StudentClass> students = JsonConvert.DeserializeObject<List<StudentClass>>(json);
                    return students;
            }
            catch (Exception e) {
                    //create one student class that will act as an error message
                    StudentClass errorStudentClass = new StudentClass
                    {
                        StudentName = "ERROR" //this will work as  flag
                    };

                    List<StudentClass> ERRORLISTCLASS = new List<StudentClass>();
                    ERRORLISTCLASS.Add(errorStudentClass);
                    return ERRORLISTCLASS;
            }
            
        }

        public bool AddPsychologist(string Name, string surname, string email, string password)
        {
            try
            {
                PsychologistClass psychologistClass = new PsychologistClass
                {
                    PsychologistName = Name,
                    PsychologistSurname = surname,
                    PsychologistEmail = email,
                    PsychologistPassword = password
                };

                string jsonout = JsonConvert.SerializeObject(psychologistClass);
                string results = uploadjson("Psychologist/AddPsychologist?Psychologist=", jsonout);
                if (results == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }

            return false;
        }

        public bool ActivateExercise(int exerciseId) {

            try{
                string result = getJson("Exercise/ActivateExercise?exerciseId=" + exerciseId);
                if (result == "true")
                {
                    return true;
                }
               
            }
            catch (Exception e) 
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }

            return false;
        }
        public bool DeActivateExercise(int exerciseId) {

            try
            {
                string result = getJson("Exercise/DeActivateExercise?exerciseId=" + exerciseId);
                if (result == "true")
                {
                    return true;
                }
               
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public bool addExercise(string name, string description, string mediaPath ,char active)
        {
            try
            {
                ExerciseClass exercise = new ExerciseClass
                {
                    ExerciseName = name,
                    ExerciseDescription = description,
                    MediaPath = mediaPath,
                    IsActive = active
                };
                string json = JsonConvert.SerializeObject(exercise);
                string result = uploadjson("Exercise/addExercise?exercise=", json);
                if (result == "true")
                {
                    return true;
                }
               
            }
            catch(Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public bool EditExercise(int id, string name, string decription, string image, char active) {
            try
            {
                ExerciseClass exercise = new ExerciseClass
                {
                    ExerciseId = id,
                    ExerciseName = name,
                    ExerciseDescription = decription,
                    MediaPath = image,
                    IsActive = active
                };
                string json = JsonConvert.SerializeObject(exercise);
                string result = uploadjson("Exercise/EditExercise?exerciseClass=", json);
                if (result == "true")
                {
                    return true;
                }
                
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }


        public bool prescribeExercise(int psychologistId, int studentID, int exerciseID, DateTime dateprescribed) {
            try
            {

                PrescribeExerciseClass exercise = new PrescribeExerciseClass
                {
                    PsychologistId = psychologistId,
                    StudentNumber = studentID,
                    ExerciseId = exerciseID,
                    DatePrescribed = dateprescribed
                };
                string json = JsonConvert.SerializeObject(exercise);
                string result = uploadjson("Exercise/prescribeExercise?prescribeExercise=", json);
                if (result == "true")
                {
                    return true;
                }
                
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public bool UnPrescribeExercise(int psychologistId, int exerciseID, int studentID) {
            try
            {
                PrescribeExerciseClass exercise = new PrescribeExerciseClass
                {
                    PsychologistId = psychologistId,
                    StudentNumber = studentID,
                    ExerciseId = exerciseID
                };
                string json = JsonConvert.SerializeObject(exercise);
                string result = uploadjson("Exercise/Exercise/UnPrescribeExercise?prescribeExercise=", json);
                if (result == "true")
                {
                    return true;
                }
               
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public bool exerciseCompleted(int psychologistId, int exerciseID, int studentID) {
            try
            {

                PrescribeExerciseClass exercise = new PrescribeExerciseClass
                {
                    PsychologistId = psychologistId,
                    StudentNumber = studentID,
                    ExerciseId = exerciseID
                };
                string json = JsonConvert.SerializeObject(exercise);
                string result = uploadjson("Exercise/Exercise/exerciseCompleted?prescribeExercise=", json);
                if (result == "true")
                {
                    return true;
                }

            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public List<PrescribeExerciseClass> getPrescribedExercises(int studentNum)
        {
            try
            {
                string json = getJson("Exercise/getStudentPrescribedExercises?studentNum=" + studentNum);
                if (json == "false")
                {

                    return null;
                }
                List<PrescribeExerciseClass> prescribeExerciseClasses = JsonConvert.DeserializeObject<List<PrescribeExerciseClass>>(json);
                return prescribeExerciseClasses;
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<PrescribeExerciseClass> getAllPrescribedExercises() {
            try
            {
                string json = getJson("Exercise/getAllPrescribedExercises");
                if (json == "false")
                {

                    return null;
                }
                List<PrescribeExerciseClass> prescribeExerciseClasses = JsonConvert.DeserializeObject<List<PrescribeExerciseClass>>(json);
                return prescribeExerciseClasses;
            }
            catch (Exception e) {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        //CONTINUE FROM HERE



        public StudentClass GetStudent(int StudentNumber)
        {
            try
            {
                string json = getJson("Student/GetStudent?StudentNumber=" + StudentNumber);
                if (json == "false")
                {

                    return null;
                }
                StudentClass student = JsonConvert.DeserializeObject<StudentClass>(json);
                return student;
            }

            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<StudentClass> GetStudents()
        {
            try
            {
                string json = getJson("Student/GetStudents");
                if (json == "false")
                {
                    return null;
                }
                List<StudentClass> students = JsonConvert.DeserializeObject<List<StudentClass>>(json);
                return students;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public AdminClass GetAdmin(int AdminId)
        {
            try
            {
                string json = getJson("Admin/getAdmin?AdminId=" + AdminId);
                if (json == "false")
                {

                    return null;
                }
                AdminClass Admin = JsonConvert.DeserializeObject<AdminClass>(json);
                return Admin;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public ExerciseClass GetExercise(int exerciseid)
        {
            try
            {
                string json = getJson("Exercise/GetExercise?exerciseid=" + exerciseid);
                if (json == "false")
                {

                    return null;
                }
                ExerciseClass exercise = JsonConvert.DeserializeObject<ExerciseClass>(json);
                return exercise;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<ExerciseClass> GetExercises()
        {
            try
            {
                string json = getJson("Exercise/GetExercises");
                if (json == "false")
                {

                    return null;
                }
                List<ExerciseClass> exerciseClasses = JsonConvert.DeserializeObject<List<ExerciseClass>>(json);
                return exerciseClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public List<BookConsultationClass> getBookings() //getAll Bookings
        {
            try
            {
                string json = getJson("Consultation/getBookings");
                if (json == "false")
                {

                    return null;
                }
                List<BookConsultationClass> bookConsultationClasses = JsonConvert.DeserializeObject<List<BookConsultationClass>>(json);
                return bookConsultationClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<BookConsultationClass> getPsychologistBookings(int PsychologistId) //getBookingsByCounsellor Id
        {
            try
            {

                string json = getJson("Consultation/getPsychologistBookings?PsychologistId=" + PsychologistId);
                if (json == "false")
                {

                    return null;
                }
                List<BookConsultationClass> bookConsultationClasses = JsonConvert.DeserializeObject<List<BookConsultationClass>>(json);
                return bookConsultationClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }
        public List<BookConsultationClass> getStudentBookings(int StudentNumber) //getBookings by Student ID
        {
            try
            {
                string json = getJson("Consultation/getStudentBookings?StudentNumber=" + StudentNumber);
                if (json == "false")
                {

                    return null;
                }
                List<BookConsultationClass> bookConsultationClasses = JsonConvert.DeserializeObject<List<BookConsultationClass>>(json);
                return bookConsultationClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }
        public BookConsultationClass getBooking(int psychologistId, int studentNum, DateTime date)
        {
            try
            {
                BookConsultationClass bookConsultationClass = new BookConsultationClass
                {
                    PsychologistId = psychologistId,
                    StudentNumber = studentNum,
                    BookDate = date
                };
                string jsonOut = JsonConvert.SerializeObject(bookConsultationClass);
                string json = uploadjson("Consultation/getBooking?bookConsultationClass=", jsonOut);
                if (json == "false")
                {
                    return null;
                }
                BookConsultationClass bookConsultationClasses = JsonConvert.DeserializeObject<BookConsultationClass>(json);
                return bookConsultationClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public bool BookConsultation(DateTime date, string time, int Stu_Num, int Couns_id) 
        {
            try
            {
                BookConsultationClass bookConsultationClass = new BookConsultationClass
                {
                    BookDate = date,
                    BookTime = time,
                    StudentNumber = Stu_Num,
                    PsychologistId = Couns_id
                };

                string json = JsonConvert.SerializeObject(bookConsultationClass);
                string result = uploadjson("Consultation/BookConsultation?consultation=", json);
                if (result == "true")
                {
                    return true;
                }
                
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public List<DiaryClass> GetDiaryEntries()
        {
            try
            {

                string json = getJson("Diary/GetDiaryEntries");
                if (json == "false")
                {

                    return null;
                }
                List<DiaryClass> diaryClasses = JsonConvert.DeserializeObject<List<DiaryClass>>(json);
                return diaryClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<DiaryClass> GetStudentDiaryEntries(int studentnum)
        {
            try
            {
                string json = getJson("Diary/GetStudentDiaryEntries?StudentNumber=" + studentnum);
                if (json == "false")
                {
                    return null;
                }
                List<DiaryClass> diaryClasses = JsonConvert.DeserializeObject<List<DiaryClass>>(json);
                return diaryClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public bool logDiaryEntry(int studentnumber, string title, string body, DateTime date)
        {
            try
            {
                DiaryClass diaryClass = new DiaryClass
                {
                    StudentNumber = studentnumber,
                    Title = title,
                    Description = body,
                    Date = date
                };
                string json = JsonConvert.SerializeObject(diaryClass);
                string result = uploadjson("Diary/LogDiaryEntry?diaryClass=", json);
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public DiaryClass GetDiaryEntry(int DiaryId)
        {
            try
            {
                string json = getJson("Diary/GetDiaryEntry?DiaryId=" + DiaryId);
                if (json == "false")
                {
                    return null;
                }
                DiaryClass diaryClass = JsonConvert.DeserializeObject<DiaryClass>(json);
                return diaryClass;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public bool EditDiaryEntry(int diaryid, string title, string description)
        {
            try
            {
                DiaryClass diaryClass = new DiaryClass
                {
                    DiaryId = diaryid,
                    Title = title,
                    Description = description,
                };
                string json = JsonConvert.SerializeObject(diaryClass);
                string result = uploadjson("Diary/EditDiaryEntry?diaryClass=", json);
                if (result == "true")
                {
                    return true;
                }
               
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        //function for marking a flagged diary entry to
        public bool FlagDiaryEntry(int DiaryId)
        {
            try
            {
                string jsonReturn = getJson("Diary/FlagDiaryEntry?diaryID=" + DiaryId);
                if (jsonReturn == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        //function for marking a flagged diary entry to
        public bool RemoveFlagDiaryEntry(int diaryID)
        {
            try
            {
                string jsonReturn = getJson("Diary/RemoveFlagDiaryEntry?diaryID=" + diaryID);
                if (jsonReturn == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        /* [OperationContract]
         List<CallLog> GetCallLogs();*/

        public bool allocateSlot(int UserID, DateTime date, string timeName)
        {
            try
            {
                AvailableDatesAndTimesClass availableDatesAndTimesClass = new AvailableDatesAndTimesClass
                {
                    PsychologistId = UserID,
                    Date = date,
                    Time = timeName
                };
                string json = JsonConvert.SerializeObject(availableDatesAndTimesClass);
                string result = uploadjson("DatesTimes/allocateSlot?avDandT=", json);
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public bool deactivateSlot(int userID, DateTime date, string timeName)
        {
            try
            {
                AvailableDatesAndTimesClass availableDatesAndTimesClass = new AvailableDatesAndTimesClass
                {
                    PsychologistId = userID,
                    Date = date,
                    Time = timeName
                };
                string json = JsonConvert.SerializeObject(availableDatesAndTimesClass);
                string result = uploadjson("DatesTimes/deactivateSlot?avDandT=", json);
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        //validates whether the name of the day is valid
        /*      public string getdayIDName(string name)
              { 

              }
              //validates whether the time is valid
              public string getTimeIDByName(string name);*/

        //public int getMinCounsellor();

        public bool isSlotAvailable(DateTime date, string time)
        {
            try
            {
                AvailableDatesAndTimesClass availableDatesAndTimesClass = new AvailableDatesAndTimesClass
                {
                    Date = date,
                    Time = time
                };
                string json = JsonConvert.SerializeObject(availableDatesAndTimesClass);
                string result = getJson("DatesTimes/isSlotAvailable?avDandT=" + json);
                if (result == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public List<AvailableDatesAndTimesClass> getUnAvailableSlots(int PsychologistId)
        {
            try
            {
                string json = getJson("DatesTimes/getUnAvailableSlots?PsychologistId=" + PsychologistId);
                if (json == "false")
                {
                    return null;
                }
                List<AvailableDatesAndTimesClass> availableDatesandtimes = JsonConvert.DeserializeObject<List<AvailableDatesAndTimesClass>>(json);
                return availableDatesandtimes;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public StuCounsLinkClass getLinkInfoByStudent(int StudentNumber)
        {
            try
            {
                string json = getJson("StudentPsychologistLink/getLinkInfoByStudent?StudentNumber=" + StudentNumber);
                if (json == "false")
                {
                    return null;
                }
                StuCounsLinkClass stuCounsLinkClass = JsonConvert.DeserializeObject<StuCounsLinkClass>(json);
                return stuCounsLinkClass;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public bool LinkStudentToCounsellor(int StudentNumber, int psychologistId)
        {
            try
            {
                StuAndCounsIDPair pair = new StuAndCounsIDPair
                {
                    StudentNumber = StudentNumber,
                    PsychologistId = psychologistId
                };
                string json = JsonConvert.SerializeObject(pair);
                string result = uploadjson("StuCounsLink/LinkStudentToCounsellor?stuAndCounsIDPair=", json);
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public Boolean UnLinStudentFromCounsellork(int StudentNumber, int psychologistId)
        {
            try
            {
                StuAndCounsIDPair pair = new StuAndCounsIDPair
                {
                    StudentNumber = StudentNumber,
                    PsychologistId = psychologistId
                };
                string json = JsonConvert.SerializeObject(pair);
                string result = uploadjson("StuCounsLink/UnLinStudentFromCounsellork?stuAndCounsIDPair=", json);
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public bool AddSessionNode(DateTime Sessiondate,string description,int rating,int StudentNumber,int psychologistId) {
            //create a new sesssion class
            try
            {

                SessionNotesClass sessionNotesClass = new SessionNotesClass
                {
                    SessionDate = Sessiondate,
                    SessionDescription = description,
                    SessionRating = rating,
                    StudentNumber = StudentNumber,
                    PsychologistId = psychologistId

                };

                string json = JsonConvert.SerializeObject(sessionNotesClass);
                string result = uploadjson("SessionNote/AddSessionNote?sessionNotesClass", json); //Add session class to db
                if (result == "true")
                {
                    return true;
                }
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public List<SessionNotesClass> GetSessionNotes()
        {
            try
            {
                string json = getJson("SessionNote/GetSessionNotes");
                if (json == "false")
                {

                    return null;
                }
                List<SessionNotesClass> noteClasses = JsonConvert.DeserializeObject<List<SessionNotesClass>>(json);
                return noteClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }
        /*public List<SessionNotesClass> GetSessionNotes()
        {
            string json = getJson("SessionNotes/GetSessionNotes");
            if (json == "false")
            {

                return null;
            }
            List<SessionNotesClass> noteClasses = JsonConvert.DeserializeObject<List<SessionNotesClass>>(json);
            return noteClasses;
        }*/

        public List<SessionNotesClass> GetStudentSessionNotes(int StudentNumber)
        {
            try
            {
                string json = getJson("SessionNote/GetStudentSessionNotes?studentnum=" + StudentNumber);
                if (json == "false")
                {
                    return null;
                }
                List<SessionNotesClass> noteClasses = JsonConvert.DeserializeObject<List<SessionNotesClass>>(json);
                return noteClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public SessionNotesClass GetSessionNote(int SessionId)
        {
            try
            {
                string json = getJson("SessionNote/GetSessionNote?id=" + SessionId);
                if (json == "false")
                {
                    return null;
                }
                SessionNotesClass noteClass = JsonConvert.DeserializeObject<SessionNotesClass>(json);
                return noteClass;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public List<MoodClass> GetMoods()
        {
            try
            {
                string json = getJson("Mood/GetMoods");
                if (json == "false")
                {
                    return null;
                }

                List<MoodClass> moodClasses = JsonConvert.DeserializeObject<List<MoodClass>>(json);
                return moodClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<MoodClass> GetMoods(int StudentNumber) {
            try
            {
                string json = getJson("Mood/GetMoods?StudentNumber="+StudentNumber);
                if (json == "false")
                {
                    return null;
                }

                List<MoodClass> moodClasses = JsonConvert.DeserializeObject<List<MoodClass>>(json);
                return moodClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public NotificationClass GetNotification(int StudentNumber)
        {
            try
            {
                string result = getJson("Notification/GetNotification?StudentNumber=" + StudentNumber);
                if (result == "false")
                {
                    return null;
                }
                NotificationClass notification = JsonConvert.DeserializeObject<NotificationClass>(result);
                return notification;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public bool AddNotification(int psychologistId, int StudentNumber, string description)
        {
            try
            {
                NotificationClass notification = new NotificationClass
                {
                    Description = description,
                    PsychologistId = psychologistId,
                    StudentNumber = StudentNumber


                };
                string jsonOut = JsonConvert.SerializeObject(notification);
                string result = uploadjson("Notification/AddNotification?notification=", jsonOut);
                if (result == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public bool DeActivateNotification(int notificationId)
        {
            try
            {
                string result = getJson("Notification/DeActivateNotification?notificID=" + notificationId);
                if (result == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;
        }

        public List<NotificationClass> getAllNotifications()
        {
            try
            {
                string result = getJson("Notification/GetAllNotifications");
                List<NotificationClass> notificationClasses = JsonConvert.DeserializeObject<List<NotificationClass>>(result);
                return notificationClasses;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        public MedicineTrackerClass GetMedicine(int medicineId)
        {
            try
            {
                string jsonIn = getJson("Medicine/GetMedicine?medicineId=" + medicineId);
                if (jsonIn == "false")
                {
                    return null;
                }
                MedicineTrackerClass medicineTrackerClass = JsonConvert.DeserializeObject<MedicineTrackerClass>(jsonIn);
                return medicineTrackerClass;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }

        public List<MedicineTrackerClass> GetMedicines(int StudentNumber)
        {
            try
            {
                string jsonIn = getJson("Medicine/GetMedicines?StudentNumber=" + StudentNumber);
                if (jsonIn == "false")
                {
                    return null;
                }
                List<MedicineTrackerClass> medicineTrackerClass = JsonConvert.DeserializeObject<List<MedicineTrackerClass>>(jsonIn);
                return medicineTrackerClass;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;
        }
        public bool LogMedicine(DateTime date, string NameOfMedicine, string category, int StudentNumber, string DoctorName)
        {
            try
            {
                MedicineTrackerClass medicine = new MedicineTrackerClass
                {
                    Date = date,
                    NameOfMedicine = NameOfMedicine,
                    Category = category,
                    StudentNumber = StudentNumber,
                    NameOfDoctor = DoctorName,
                };

                string jsnout = JsonConvert.SerializeObject(medicine);
                string jsonIN = uploadjson("Medicine/LogMedicine?medicine=", jsnout);
                if (jsonIN == "false")
                {
                    return false;
                }
                return true;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return false;

        }

        public List<CallModel> getCallLogs(int StudentNumber) {

            try
            {
                string jsonIn = getJson("CallLog/getCallLogs?StudentNumber=" + StudentNumber);
                if (jsonIn == "false")
                {
                    return null;
                }
                List<CallModel> callModels = JsonConvert.DeserializeObject<List<CallModel>>(jsonIn);
                return callModels;
            }
            catch (Exception e)
            {
                System.Console.WriteLine("Issue with calling to the server " + e.GetBaseException());
            }
            return null;

        }

        //HELPER FUNCTIONS
        public string getJson(string myurl)
        {

            //TAKES in the url and returns the json for the requested JSON
            WebClient apiclient = new WebClient();
            apiclient.Headers["Content-type"] = "application/json";
            apiclient.Encoding = Encoding.UTF8;

            string json = apiclient.DownloadString(HelperClass.apiurl + myurl);
            return json;
        }

        public string uploadjson(string myurl, string inputJson)
        {
            WebClient client = new WebClient();
            client.Headers["Content-type"] = "application/json";
            client.Encoding = Encoding.UTF8;
            string json = client.UploadString(HelperClass.apiurl + myurl, inputJson);
            return json;
        }

    }
}